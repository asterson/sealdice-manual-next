import{_ as h,D as e,c as r,j as s,a,I as i,w as l,a8 as n,o as k}from"./chunks/framework.C7ysi3tu.js";const c="/sealdice-manual-next/assets/platform-qq-builtin-1.CuhUrma2.png",d="/sealdice-manual-next/assets/platform-qq-builtin-2.CsxwmFcJ.png",g="/sealdice-manual-next/assets/platform-qq-lagrange-release.DuJWpDwK.png",E="/sealdice-manual-next/assets/platform-qq-lagrange-1.C7fEhWhX.png",u="/sealdice-manual-next/assets/platform-qq-lagrange-2.C4VYY6Lp.png",m="/sealdice-manual-next/assets/platform-qq-lagrange-3.DwUI2h78.png",q="/sealdice-manual-next/assets/platform-qq-lagrange-4.BvabiQyh.png",y="/sealdice-manual-next/assets/platform-qq-lagrange-5.q7RWFdnu.png",b="/sealdice-manual-next/assets/platform-qq-lagrange-6.DWsyrztG.png",C="/sealdice-manual-next/assets/platform-qq-lagrange-7.BQZzzKgl.png",_="/sealdice-manual-next/assets/platform-qq-lagrange-8.C5E7Yeei.png",F="/sealdice-manual-next/assets/platform-qq-llonebot-2.CRkT2vLu.png",f="/sealdice-manual-next/assets/platform-qq-shamrock-1.DJ7tSnjn.png",Q="/sealdice-manual-next/assets/platform-qq-shamrock-2.BojvCHzi.png",B="/sealdice-manual-next/assets/platform-qq-shamrock-3.BlEqBGNz.png",S="/sealdice-manual-next/assets/platform-qq-shamrock-4.FmFC-9a8.png",v="/sealdice-manual-next/assets/platform-qq-shamrock-5.BMm24yfS.png",L="/sealdice-manual-next/assets/platform-qq-shamrock-6.Bf1yZXSr.png",x="/sealdice-manual-next/assets/platform-qq-shamrock-7.DfAmZJ9X.png",A="/sealdice-manual-next/assets/platform-qq-shamrock-8.BJqlFaWq.png",P="/sealdice-manual-next/assets/platform-qq-shamrock-9.CRgE7lL1.png",w="/sealdice-manual-next/assets/image-016.McE9_BqK.png",T="/sealdice-manual-next/assets/image-017.h2f0ACoz.png",D="/sealdice-manual-next/assets/image-018.DTqSvbQG.png",N="/sealdice-manual-next/assets/platform-qq-bot-qrcode.CZVWW4Rf.jpg",W="/sealdice-manual-next/assets/platform-qq-official-1.xvYBQLAg.png",I="/sealdice-manual-next/assets/platform-qq-official-2.BG1tRARH.png",R="/sealdice-manual-next/assets/platform-qq-official-3.DhHb4kkJ.png",Ls=JSON.parse('{"title":"QQ","description":"","frontmatter":{"lang":"zh-cn","title":"QQ"},"headers":[],"relativePath":"deploy/platform-qq.md","filePath":"deploy/platform-qq.md","lastUpdated":1717196336000}'),z={name:"deploy/platform-qq.md"},O=n('<h1 id="qq" tabindex="-1">QQ <a class="header-anchor" href="#qq" aria-label="Permalink to &quot;QQ&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">本节内容</p><p>本节将包含你在 QQ 平台接入海豹核心需要了解的特定内容。</p></div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><h3 id="有关-qq-平台机器人的说明" tabindex="-1">有关 QQ 平台机器人的说明 <a class="header-anchor" href="#有关-qq-平台机器人的说明" aria-label="Permalink to &quot;有关 QQ 平台机器人的说明&quot;">​</a></h3><p>直至目前，绝大部分群聊中的 QQ 机器人采用「<strong>假用户</strong>」方式，即通过第三方软件接入注册的另一个 QQ。<strong>QQ 官方一直在对第三方实现进行技术与非技术层面的多重打击。</strong></p><p>从目前的表现看来，QQ 官方会对账号行为进行检测，来区分出账号是否是正常用户（如不正常的登录方式，以不合理的速度在多地区登录等等）。我们无法得知具体的检测细节，但已证实的是，当 QQ 账号用作机器人并被检测到时，该 QQ 会视为风险账号，被官方予以警告，封禁，临时甚至 <strong>永久冻结</strong> 的惩罚。</p><p>尽管不同方案之间的差异很大（比如基于 Android QQ 协议的 <a href="/sealdice-manual-next/about/archieve.html#Go-cqhttp/Mirai">Go-Cqhttp</a> 已经<strong>基本不可用</strong>，而 <a href="#lagrange">Lagrange</a> 和 <a href="#llonebot">LLOneBot</a> 等基于 NTQQ 的方案目前比较稳定），但需要明白的是，这些方案都由社区第三方软件提供，实质上以 QQ 官方角度等同于「<strong>外挂软件</strong>」，并不受到官方支持（甚至是被打击的目标）。</p><p>因此，<em>是否在 QQ 平台搭建这样的非官方机器人取决于你的慎重考虑</em>。同时，第三方方案的可用性也可能会随时间推移而存在变化，海豹官方无法做出任何保证。</p><p>目前，仅有 <a href="#官方机器人">官方机器人服务</a> 是被 QQ 官方认可的机器人方案。该方案可用性由 QQ 官方保证，但目前 <strong>仅对企业用户和部分受邀个人用户开放</strong>，同时在功能上非常受限。</p><p>如果有可能，建议迁移到其它平台，在 QQ 平台选择何种方式取决于你自己的选择。</p><div class="danger custom-block"><p class="custom-block-title">危险</p><p>倘若出现账号被封禁等情况，海豹官方无力解决此类问题，也不对相应后果负责。</p></div><h3 id="对接引导" tabindex="-1">对接引导 <a class="header-anchor" href="#对接引导" aria-label="Permalink to &quot;对接引导&quot;">​</a></h3><p>所有支持的途径参见目录，本节提供了多种对接途径的引导。</p>',13),V=s("a",{href:"#内置客户端"},"内置客户端",-1),U=n('<p>对于需要使用更加灵活的方案的用户，我们推荐如下：</p><ul><li>需要比较简单的部署流程，希望资源占用低的，见 <a href="#lagrange">Lagrange</a> 或 <a href="#napcatqq">NapCat</a>；</li><li>需要比较简单的部署流程，不是特别在意资源占用的，见 <a href="#llonebot">LLOneBot</a>；</li><li>通过 docker 部署海豹的，见 <a href="./platform-qq-docker.html">QQ - Docker 中的海豹</a>；</li><li>Android 手机/模拟器用户见 <a href="#shamrock">Shamrock</a>（需要 Root）或 <a href="#shamrock-lspatch">Shamrock LSPatch</a>。</li><li>如果你有 QQ 官方机器人权限，见 <a href="#官方机器人">官方机器人</a>；</li><li>Go-cqhttp 与 QSign 方案因可用性原因已被弃用。<strong>我们不建议任何用户再使用此方式部署 QQ 接入，同时强烈建议正在使用该方案的用户迁移</strong>。<a href="/sealdice-manual-next/about/archieve.html#Go-cqhttp/Mirai">之前的资料</a>保留备查。</li></ul><p>不同的对接方式适应不同的情况，可能会存在途径特有的功能缺失和其它问题，请根据自己的情况选择适合的方式。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>内置客户端、Lagrange、LLOneBot 和 Napcat 都占用 PC 端协议。在使用这些连接方式时，不可同时登录 PC 端 QQ，否则将导致挤占下线。</p><p>由于官方 QQ 设定，PC 端协议（即以上四种登录方式）每隔 30 天需要重新登录。</p></div>',4),M={id:"内置客户端",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#内置客户端","aria-label":'Permalink to "内置客户端 <Badge type="tip" text="v1.4.5" />"'},"​",-1),G=n('<div class="warning custom-block"><p class="custom-block-title">注意</p><p>需要知道的是，该方案也是前言中提到的非官方机器人，并不受到 QQ 官方认可。</p></div><div class="danger custom-block"><p class="custom-block-title">危险：部分过时系统不支持</p><p>内置客户端暂不支持 Windows 7，Windows Server 2008，32 位 Windows 也不可用。</p><p>Windows Server 2012 可能会缺少部分运行库，需要自行下载安装。</p></div><p>进入海豹 Web UI 的「账号设置」新增连接，选择账号类型「QQ(内置客户端)」，这也是默认选项，填写 QQ 号：</p><img src="'+c+'" alt="内置客户端" width="80%"><p>随后使用登录了目标账号的手机 QQ 尽快扫码登录：</p><img src="'+d+'" alt="内置客户端扫码登录" width="40%"><p>在手机上确认登录以后，等待状态变为「已连接」即可。</p><div class="info custom-block"><p class="custom-block-title">内置客户端 BUG</p><p>由于内置客户端的实现不完全，会有莫名其妙的 bug，所以我们推荐有能力的骰主使用手册中的其他方案。</p><p>但如果你仍然决定使用「QQ(内置客户端)」，当遇到无法使用时可以尝试以下解决方案：</p><ul><li>PC 端：删除 <code>data/default/extra/lagrange-QQ号</code> 文件夹，重启海豹，删除账号重新添加。</li><li>安卓端：停止海豹核心，在右上角设置中将「文件同步模式」打开，返回主界面，点击「导出数据」，到显示的目录删除 <code>data/default/extra/lagrange-QQ号</code> 目录，然后点击「导入数据」，删除账号重新添加。</li></ul></div>',8),K={id:"lagrange",tabindex:"-1"},H=s("a",{class:"header-anchor",href:"#lagrange","aria-label":'Permalink to "Lagrange <Badge type="tip" text="v1.4.2" />"'},"​",-1),J=n('<div class="info custom-block"><p class="custom-block-title">Lagrange</p><p><a href="https://github.com/KonataDev/Lagrange.Core" target="_blank" rel="noreferrer">Lagrange</a>（拉格兰）是一个 NTQQ 协议相关的开源项目。其包括目前实现了 Linux NTQQ 协议的 Lagrange.Core，和提供 OneBot-V11 Api 的 Lagrange.Onebot 两部分。</p><p>与 GoCqhttp 类似，Lagrange 可以很方便的在多个平台（Windows、Linux、Mac）部署，海豹核心可以对接其提供的 OneBot-V11 Api 来提供 QQ 骰子服务。</p></div><h3 id="准备-lagrange" tabindex="-1">准备 Lagrange <a class="header-anchor" href="#准备-lagrange" aria-label="Permalink to &quot;准备 Lagrange&quot;">​</a></h3><p>可以在 <a href="https://github.com/KonataDev/Lagrange.Core/releases" target="_blank" rel="noreferrer">Lagrange Github Release</a> 中获取到 Nightly 版程序，根据你的系统选择相应版本下载，例如：</p><ul><li>Windows 通常选择 <code>win-x64</code> 版本；</li><li>Mac（Intel 芯片）选择 <code>osx-x64</code> 的版本；</li><li>Mac（Arm 芯片，如 M1、M2、M3 等）选择 <code>osx-arm64</code> 的版本；</li><li>……</li></ul><p><img src="'+g+'" alt="Lagrange Nightly Release"></p><details class="details custom-block"><summary>补充：使用 Lagrange Action 版本</summary><p>你还可以选择使用 Lagrange 在 Action 中自动构建的版本，这些版本是 <strong>最新</strong> 的构建。在使用这些版本时，你需要安装对应版本的 .Net SDK。</p><p><strong>除特殊情况外，我们始终建议你选择前面提到的 Nightly 版本。</strong></p><p>可以在 <a href="https://github.com/KonataDev/Lagrange.Core" target="_blank" rel="noreferrer">Lagrange Github 仓库</a> 中的 Action 页面，进入位于列表最前一条的最新制品页面，根据你的系统选择相应版本。</p><img src="'+E+'" alt="Lagrange Action" width="80%"><p>点击进入页面后拉到最下方，选择相应版本下载。</p><img src="'+u+'" alt="Lagrange Action Artifacts" width="40%"></details><h3 id="运行-lagrange" tabindex="-1">运行 Lagrange <a class="header-anchor" href="#运行-lagrange" aria-label="Permalink to &quot;运行 Lagrange&quot;">​</a></h3><p>解压下载的 Nightly 版的 Lagrange 压缩文件，你可以看见名如 <code>Lagrange.OneBot.exe</code> 的应用程序，双击启动即可。启动时有可能会先弹出如下警告，按步骤允许即可：</p><img src="'+m+'" alt="Lagrange 运行警告 1" width="40%"><img src="'+q+'" alt="Lagrange 运行警告 2" width="40%"><p>成功启动后可以发现打开了如下的命令行窗口，其中提示已创建了一个配置文件：</p><img src="'+y+`" alt="Lagrange 启动后提示" width="80%"><p>可以发现，在程序所在的文件夹中多出了一个 <code>appsettings.json</code>，这是 <a href="#lagrange-配置文件">Lagrange 的配置文件</a>，<strong>你需要打开并修改其中的一些项</strong>。也可以在启动前直接手动新建 <code>appsettings.json</code> 并写入内容。</p><p>修改后内容大致如下：</p><p><code>appsettings.json</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Logging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;LogLevel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Information&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Microsoft&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Warning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Microsoft.Hosting.Lifetime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Information&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;SignServerUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://sign.lagrangecore.org/api/sign&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Account&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Uin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Linux&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;AutoReconnect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;GetOptimumServer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;IgnoreSelf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Implementations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ForwardWebSocket&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;HeartBeatInterval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;AccessToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中有几个重要的设置项需要填写和注意：</p><ul><li><code>Password</code> 为空时为扫码，这里请留空。</li><li><code>SignServerUrl</code>：NTQQ 的签名服务地址，<strong>注意此处的签名服务需要是 Linux NTQQ 签名服务，不可以使用 QSign、Shamrock 等提供的 Android QQ 签名服务</strong>。</li><li><code>Implementations</code>：这是 Lagrange 的连接配置，海豹将使用 <code>ForwardWebSocket</code>，即正向 WebSocket 方式连接 Lagrange，该方式下的 <code>Host</code> 和 <code>Port</code> 是 Lagrange 将提供的 <strong>OneBot-V11 正向 WS 服务地址</strong>，记下以供后续使用。如果对应端口已占用请自行调整。</li></ul><div class="info custom-block"><p class="custom-block-title">Linux NTQQ 的签名服务</p><p>拉格兰项目提供公共签名服务，运行程序后默认生成的配置文件中已经包含了签名地址。</p><p>可访问<a href="https://github.com/KonataDev/Lagrange.Core?tab=readme-ov-file#signserver" target="_blank" rel="noreferrer">拉格兰项目的 GitHub 仓库，在其 README 中</a>验证其是否正确有效。</p></div><div class="warning custom-block"><p class="custom-block-title">注意：保证连接模式匹配</p><p>Lagrange 默认生成的配置文件生成的是 <code>ReverseWebSocket</code>（即反向 WebSocket），如果你使用该种连接方式，下文海豹对接时应该选择「OneBot 11 反向 WS」模式。</p><p>海豹推荐使用正向连接，如果你选择正向连接方式，需要像上述示例中的配置文件一样调整为 <code>ForwardWebSocket</code>，下文海豹对接时按引导执行即可。</p><p>具体的连接细节还可以参见 Lagrange 文档的 <a href="https://lagrangedev.github.io/Lagrange.Doc/Lagrange.OneBot/Config/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer">配置文件</a> 一节。</p></div><p>修改配置完成后的文件夹如下：</p><img src="`+b+'" alt="正式运行前的 Lagrange 文件夹" width="40%"><p>在配置文件按需要正确修改后，在命令行中按任意键，Lagrange 将正式运行。在同一文件夹下会出现一张登录二维码图片 <code>qr-0.png</code>，在二维码过期前尽快使用手机 QQ 扫码连接。</p><details class="details custom-block"><summary>补充：Action 版 Lagrange 与 .Net SDK</summary><p>Action 中获取的 Lagrange 依赖 .Net SDK，如果你在运行 Lagrange 时出现报错，需要去下载 <a href="https://dotnet.microsoft.com/zh-cn/download" target="_blank" rel="noreferrer">.Net SDK</a> 并安装。</p><p>在下载 Lagrange 时，后缀中的数字说明了其对 .Net 版本的需求，请根据说明下载对应版本（例如后面是 8.0，则需安装 SDK 的版本为 8.0）。</p><p>此外，与 Nightly 下载后解压的单文件版本的 Lagrange 不同，在解压 Action 制品压缩文件后，你可以看见 <code>Lagrange.OneBot.exe</code> 等多个文件，这些文件都是运行必不可少的。</p><p>包括生成的配置文件在内，一个正确的 Action 版 Lagrange 文件夹如下：</p><img src="'+C+'" alt="Action 版的 Lagrange 文件夹" width="40%"></details><h3 id="海豹连接-lagrange" tabindex="-1">海豹连接 Lagrange <a class="header-anchor" href="#海豹连接-lagrange" aria-label="Permalink to &quot;海豹连接 Lagrange&quot;">​</a></h3><p>进入海豹 Web UI 的「账号设置」新增链接，选择账号类型「QQ(onebot11正向WS)」。</p><p>账号填写骰子的 QQ 号，连接地址使用上面记下的 WS 正向服务地址 <code>ws://{Host}:{Port}</code>，如 <code>ws://127.0.0.1:8081</code>。</p><img src="'+_+`" alt="海豹连接 Lagrange" width="100%"><p>成功连接后即可使用。</p><h3 id="lagrange-配置文件" tabindex="-1">Lagrange 配置文件 <a class="header-anchor" href="#lagrange-配置文件" aria-label="Permalink to &quot;Lagrange 配置文件&quot;">​</a></h3><p>与可执行文件在同级目录下的 <code>appsettings.json</code> 文件，是 Lagrange 的配置文件。</p><p>最新的 Lagrange 会在没有该文件时自动创建默认配置，如果没有生成该文件，你可以按照 <a href="https://github.com/KonataDev/Lagrange.Core" target="_blank" rel="noreferrer">官方仓库的最新说明</a> 手动创建这一文件。</p><div class="warning custom-block"><p class="custom-block-title">注意：使用最新的 Lagrange</p><p><strong>我们始终建议你升级到程序的最新版本，而不是为了沿用旧配置而保持旧版本。</strong></p></div><div class="warning custom-block"><p class="custom-block-title">注意：Lagrange 配置文件格式变更</p><p>Lagrange 项目对其配置文件的格式进行过更改。如果你是在 2024 年 2 月 18 日或之前下载的 Lagrange 程序，请你参考下面的版本。</p><p>目前最新的 Lagrange 可以识别两个版本的配置文件，但依然建议修改为最新格式。</p></div><details class="details custom-block"><summary>补充：旧版 Lagrange 配置</summary><p>如果你使用的是 2024 年 2 月 18 日或之前下载的 Lagrange 程序，或使用前面提到的配置出现问题，请尝试替换为以下配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Logging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;LogLevel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Trace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Microsoft&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Warning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Microsoft.Hosting.Lifetime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Information&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;SignServerUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Account&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Uin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Linux&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;AutoReconnect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;GetOptimumServer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;IgnoreSelf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Implementation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ForwardWebSocket&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;HeartBeatInterval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;AccessToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配置项的含义与之前的说明相同，可以做相同处理。</p></details>`,35),X={id:"llonebot",tabindex:"-1"},Y=s("a",{class:"header-anchor",href:"#llonebot","aria-label":'Permalink to "LLOneBot <Badge type="tip" text="v1.4.2" />"'},"​",-1),Z=n('<div class="info custom-block"><p class="custom-block-title">LLOneBot</p><p><a href="https://github.com/LiteLoaderQQNT/LiteLoaderQQNT" target="_blank" rel="noreferrer">LiteLoaderQQNT</a>（LiteLoader）是 NTQQ 的插件加载器，允许通过插件注入 QQ 实现某些特定的功能。</p><p><a href="https://github.com/LLOneBot/LLOneBot" target="_blank" rel="noreferrer">LLOneBot</a> 则是 Liteloader 的插件之一，可以实现劫持客户端对外开放 API，可以理解为装在 PC 上的 Shamrock。</p></div><h3 id="安装-llonebot" tabindex="-1">安装 LLOneBot <a class="header-anchor" href="#安装-llonebot" aria-label="Permalink to &quot;安装 LLOneBot&quot;">​</a></h3><p>请参考 <a href="https://llonebot.github.io/zh-CN/" target="_blank" rel="noreferrer">官方文档</a> 中的说明。</p><h3 id="配置海豹" tabindex="-1">配置海豹 <a class="header-anchor" href="#配置海豹" aria-label="Permalink to &quot;配置海豹&quot;">​</a></h3><p>安装完成后重新登录 QQ，进入 LLOneBot 的设置页：</p><p><img src="'+F+`" alt="LLOneBot 设置页"></p><p>支持两种方式与海豹对接：</p><ul><li>正向连接：默认开放的正向 ws 端口为 3001，在海豹的新添账号选择「QQ(onebot11正向WS)」，账号处随便填写，连接地址填 <code>ws://localhost:3001</code>。</li><li>反向连接：关闭正向连接开关，打开反向连接，点击「添加」，输入 <code>ws://127.0.0.1:4001/ws</code>，在海豹的新添账号选择「QQ(onebot11反向WS)」，输入账号。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>如若想修改端口请在 LLOneBot 的设置 UI 自行修改。</li><li>请注意设置中的正向连接和反向连接请 <strong>不要同时打开</strong>，否则会发不出消息。</li><li><strong>如果你是在服务器上部署，可能需要使用 <a href="https://memreduct.org/mem-reduct-download/" target="_blank" rel="noreferrer">Mem Reduct</a> 之类的工具定时清理过高的内存占用。</strong></li></ul></div><h2 id="napcatqq" tabindex="-1">NapCatQQ <a class="header-anchor" href="#napcatqq" aria-label="Permalink to &quot;NapCatQQ&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">NapCatQQ</p><p><a href="https://github.com/NapNeko/NapCatQQ" target="_blank" rel="noreferrer">NapCatQQ</a> 是在后台低占用运行的无头（没有界面）的 NTQQ，具体占用会因人而异，QQ 群、好友越多占用越高。</p><p><a href="https://napneko.github.io/zh-CN/" target="_blank" rel="noreferrer">NapCat 官方文档</a></p><p><strong>注意同个账号不能同时登录原版 QQ 和 NapCatQQ</strong>。</p></div><p>NapCat 是基于官方 NTQQ 实现的 Bot 框架，因此在开始前，你需要根据 <a href="https://napneko.github.io/zh-CN/guide/getting-started#%E5%AE%89%E8%A3%85-qq" target="_blank" rel="noreferrer">NapCatQQ</a> 的手册安装官方 QQ，若 QQ 版本过低会导致程序无法正常启动。</p><h3 id="下载-napcatqq" tabindex="-1">下载 NapCatQQ <a class="header-anchor" href="#下载-napcatqq" aria-label="Permalink to &quot;下载 NapCatQQ&quot;">​</a></h3><p>前往 <a href="https://github.com/NapNeko/NapCatQQ/releases" target="_blank" rel="noreferrer">NapCatQQ Release</a> 页面下载最新版本。</p><h3 id="启动-napcatqq" tabindex="-1">启动 NapCatQQ <a class="header-anchor" href="#启动-napcatqq" aria-label="Permalink to &quot;启动 NapCatQQ&quot;">​</a></h3><p>在启动前，你需要修改 <code>config/onebot11.json</code> 内容，并重名为 <code>onebot11_&lt;你的QQ号&gt;.json</code> ，如 <code>onebot11_1234567.json</code> 。</p><p>json 配置内容参数解释：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否启用http服务, true为启动，false为禁用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // HTTP服务监听的 ip 地址，为空则监听所有地址</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // http服务端口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // http上报密钥，可为空</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否启用http心跳</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enableHeart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否启用http上报服务</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enablePost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // http上报地址, 如[&quot;http://127.0.0.1:8080/onebot/v11/http&quot;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postUrls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;ws&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否启用正向websocket服务</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正向websocket服务监听的 ip 地址，为空则监听所有地址</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正向websocket服务端口</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3001</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;reverseWs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 是否启用反向websocket服务</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 反向websocket对接的地址, 如[&quot;ws://127.0.0.1:8080/onebot/v11/ws&quot;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;urls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;GroupLocalTime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Record&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否开启本地群聊时间记录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;RecordList&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//开启全部群 [&quot;-1&quot;]  单个群配置 [&quot;11111&quot;] 多个群 [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否开启调试模式，开启后上报消息会携带一个raw字段，为原始消息内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ws心跳间隔，单位毫秒</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;heartInterval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 消息上报格式，array为消息组，string为cq码字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;messagePostFormat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否将本地文件转换为URL，如果获取不到url则使用base64字段返回文件内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enableLocalFile2Url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 音乐签名URL，用于处理音乐相关请求</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;musicSignUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否上报自己发送的消息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;reportSelfMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // access_token，可以为空</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中有几个重要的设置项需要填写和注意：</p><ul><li><code>ws:enable</code>：这是 NapCat 的 ws 正向连接配置，你需要将其修改为 <code>true</code>，即启用正向 WebSocket 方式连接 NapCatQQ。</li><li><code>ws:port</code>：这是正向连接端口，请记下以便后续使用。</li></ul><p>也可以使用 WebUI 进行配置，具体请看 <a href="https://napneko.github.io/zh-CN/guide/config" target="_blank" rel="noreferrer">NapCat 手册</a>。</p><p>修改完文件后请根据 <a href="https://napneko.github.io/zh-CN/guide/getting-started#%E5%90%AF%E5%8A%A8" target="_blank" rel="noreferrer">NapCatQQ</a> 的教程启动程序，扫码登录即可。</p><h3 id="海豹连接" tabindex="-1">海豹连接 <a class="header-anchor" href="#海豹连接" aria-label="Permalink to &quot;海豹连接&quot;">​</a></h3><p>进入海豹 Web UI 的「账号设置」新增链接，选择账号类型「QQ(onebot11正向WS)」。</p><p>账号填写骰子的 QQ 号，连接地址使用上面记下的 ws 正向服务地址 <code>ws://127.0.0.1:{wsPort}</code>，如 <code>ws://127.0.0.1:3001</code>。</p>`,25),$={id:"shamrock",tabindex:"-1"},ss=s("a",{class:"header-anchor",href:"#shamrock","aria-label":'Permalink to "Shamrock <Badge type="tip" text="v1.4.2" />"'},"​",-1),as=n('<div class="danger custom-block"><p class="custom-block-title">危险：Shamrock 已停止更新</p><p>Shamrock 已于 2024 年 4 月 20 日归档，将不再进行更新。</p></div><div class="danger custom-block"><p class="custom-block-title">危险：<code>1.1.0</code> 及以上版本的 Shamrock 不适用以下教程</p><p>2024 年 4 月 2 日，OpenShamrock 开发组于 <a href="https://github.com/whitechi73/OpenShamrock/discussions/272#discussion-6300354" target="_blank" rel="noreferrer">Discussion#272</a> 宣布，Shamrock 将会从 <code>1.1.0</code> 版本起弃用 OneBot V11 支持，迁移至新的 <a href="https://github.com/KarinJS/kritor" target="_blank" rel="noreferrer">Kritor</a> 协议。</p><p><strong>这意味着 <code>1.1.0</code> 及之后版本的 Shamrock 将不再支持 OneBot V11，以下教程也不再适用</strong>。请仔细分辨，以免造成麻烦。</p><p>海豹开发组也正在着手对新的 Kritor 协议进行适配，请耐心等待。</p></div><div class="warning custom-block"><p class="custom-block-title">注意：有难度的操作</p><p>此方式存在一定难度，你可能需要对 Root，使用命令行程序等有所了解。</p></div><div class="info custom-block"><p class="custom-block-title">Shamrock</p><p><a href="https://whitechi73.github.io/OpenShamrock/" target="_blank" rel="noreferrer">Shamrock</a> 是一个基于 <a href="https://github.com/LSPosed/LSPosed" target="_blank" rel="noreferrer">LSPosed</a>/Xposed 框架，实现劫持 QQ 以对外暴露 Onebot Api 的软件。你可以在 Android 手机/模拟器中使用 Shamrock 代替已经停止开发的 gocq。</p><p>遗憾的是，Shamrock 的使用依赖于 Android 的 root 权限，而手机厂商对 root 管控愈加严格，实体手机获取 root 权限的门槛很高，而模拟器中使用 Shamrock 的效果也不是很可观。因此，这种解决方案适合个人与朋友使用骰子的场景。</p><p>此外，如果你想使用 Shamrock 代替 gocq，请确保你有良好的计算机使用能力。</p><p>本节主要讲解如何使用模拟器实现 Shamrock，如果你有一台已经 root 的手机，也可以参考本节内容，<strong>本教程不涉及说明如何 root 手机</strong>，海豹官方也不对 root 手机造成的后果负责，请自行斟酌。</p></div><div class="tip custom-block"><p class="custom-block-title">提示：如何 Root 手机</p><p>Root 手机可以参阅 <a href="https://magiskcn.com" target="_blank" rel="noreferrer">小米手机安装面具教程</a>。也可以前往 <a href="https://www.coolapk.com/" target="_blank" rel="noreferrer">酷安</a> 寻找更详细的教程。</p></div><div class="warning custom-block"><p class="custom-block-title">注意：低配置设备可能无法使用 Shamrock！</p><p>在尝试通过模拟器使用 Shamrock 的场景下，由于模拟器对性能要求较高，包括 <strong>轻量级服务器</strong>、旧电脑、小主机等配置较低的设备可能无法支持使用。</p></div><h3 id="准备模拟器" tabindex="-1">准备模拟器 <a class="header-anchor" href="#准备模拟器" aria-label="Permalink to &quot;准备模拟器&quot;">​</a></h3><p>下面将使用 <a href="https://www.yeshen.com/" target="_blank" rel="noreferrer">夜神模拟器</a> 作为示例。</p><p>使用时，确保安卓版本在安卓 8 以上，而在安卓 11 以下，最好使用安卓 9。</p><h3 id="获取-root-权限" tabindex="-1">获取 Root 权限 <a class="header-anchor" href="#获取-root-权限" aria-label="Permalink to &quot;获取 Root 权限&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">Magisk</p><p>Magisk（面具）是一套开源的 Android 自定义工具，通常用于获取 root 权限。</p><p>Root 即 Android 的超级用户权限，如对 QQ 应用进行注入等的危险操作需要 root 权限。</p></div><p><em>在使用之前，请在模拟器设置中打开 root 选项，软件中获取的一切权限都给予 <strong>通过</strong>，包括 <strong>root 权限</strong>。</em></p><p>使用 <a href="https://cowtransfer.com/s/9794ead1113d47" target="_blank" rel="noreferrer">面具安装工具</a>，把它安装到模拟器。</p><p>然后启动软件，输入 <code>m</code> 回车，再输入 <code>y</code> 回车，会索取超级用户权限，给予，然后输入 <code>1</code> 回车，再输入 <code>a</code> 回车，输入 <code>1</code> 回车，此时面具就安装到你的模拟器上了。</p><p>打开面具模块，此时面具会索取超级用户权限，给予，此时你会发现你的超级用户权限那里是灰的，<strong>关闭你的超级用户权限</strong>，重新启动你的模拟器。</p><p><strong>此时你会发现你的超级用户模块已经激活</strong>。在面具的设置里启动 <code>zygisk</code> 模块，随后你需要再次重启模拟器，使得 <code>zygisk</code> 模块生效。</p><p><img src="'+f+'" alt="启用 zygisk"></p><h3 id="安装-lsposed-模块" tabindex="-1">安装 LSPosed 模块 <a class="header-anchor" href="#安装-lsposed-模块" aria-label="Permalink to &quot;安装 LSPosed 模块&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示：使用 xposed/edxposed</p><p>理论上，使用更为老旧的 xposed/edxposed 或在手机上运行虚拟机的 virtualXposed 的方案也是可行的，但我们不推荐也未尝试过使用它们。</p><p><strong>任何不按教程的行动请自行处理疑难问题</strong>，海豹官方不对此提供帮助。</p></div><p>请于 <a href="https://github.com/LSPosed/LSPosed/releases" target="_blank" rel="noreferrer">LSPosed Releases</a> 页下载模块。</p><div class="warning custom-block"><p class="custom-block-title">注意：zygisk</p><p><strong>务必</strong>选择以 <code>zygisk</code> 结尾的包。</p></div><p>下载完成后，把文件上传到模拟器中。一般情况下，直接把文件拖动到模拟器就可以传文件了，且文件一般在 <code>picture</code> 文件夹中，如果没有请参照你使用的模拟器说明。</p><p>在你传完文件之后，在最右侧切换到「模块」页后，你可以看到从本地安装的选项。单击你刚刚传到模拟器里的文件，等待安装完成即可，随后你可以在右下角看到重启按钮，点击等待重启。</p><p>安装完成后应该如下所示：</p><p><img src="'+Q+'" alt="完成 LSPosed 模块安装"></p><h3 id="安装-shamrock" tabindex="-1">安装 Shamrock <a class="header-anchor" href="#安装-shamrock" aria-label="Permalink to &quot;安装 Shamrock&quot;">​</a></h3><p>请于 <a href="https://github.com/whitechi73/OpenShamrock/actions/workflows/build-apk.yml" target="_blank" rel="noreferrer">Shamrock Releases</a> 下载 Shamrock 的 apk 安装包，直接将 apk 文件拖动到模拟器即可进行安装。</p><p>如果模拟器中没有安装 QQ，此时你还需要将 <a href="https://im.qq.com" target="_blank" rel="noreferrer">QQ</a> 安装到模拟器中。</p><p>安装完成后，<strong>首先启动 Shamrock</strong>。在通知上，你可以打开 LSPosed 的页面，在<strong>模块一栏中启用 Shamrock</strong>。</p><p><img src="'+B+'" alt="启用 Shamrock"></p><p>选中 Shamrock，进入勾选 QQ，并长按 QQ 选择 <strong>强行停止</strong>。</p><p><img src="'+S+'" alt="Shamrock 中勾选 QQ"></p><p>随后再打开 QQ，你可以看到「加载 Shamrock 库成功」的提示，这代表 Shamrock 已经成功注入了 QQ。</p><p>成功注入后，打开 Shamrock 启用 ws 服务，通常情况下无需修改 Shamrock 的任何内容，如有其它需求请阅读 <a href="https://whitechi73.github.io/OpenShamrock/" target="_blank" rel="noreferrer">Shamrock 文档</a>。</p><p><img src="'+v+'" alt="Shamrock 启用 ws"></p><h3 id="开放模拟器端口供海豹对接" tabindex="-1">开放模拟器端口供海豹对接 <a class="header-anchor" href="#开放模拟器端口供海豹对接" aria-label="Permalink to &quot;开放模拟器端口供海豹对接&quot;">​</a></h3><p>首先下载 <a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn" target="_blank" rel="noreferrer">adb</a> 工具，解压到电脑中任何可用的位置。</p><p>随后找到模拟器供 adb 连接的端口，夜神模拟器路径示例如下：</p><p><img src="'+L+'" alt="夜神模拟器 adb 端口"></p><p>其中：</p><ul><li><code>Nox</code> 是模拟器根路径。</li><li><code>Nox_4</code> 是模拟器的编号，你可以在多开助手中看到你的编号。</li><li>选中的文件就是要找的文件，在 vscode 中（或者其它文本编辑器）中打开。</li></ul><p><img src="'+x+'" alt="打开 "></p><p><code>guestport</code> 值为 <code>5555</code> 的 <code>hostport</code> 即为所需端口，如示例中就是 <strong>62028</strong>，记住这个端口号。</p><p>在你解压的 <code>platform-tools</code> 里打开终端，或者把 <code>platform-tools</code> 加入环境变量后再启用终端。也可以在 <code>platform-tools</code> 里新建一个 <code>.bat</code> 文件，把下面的命令写到文件里面。</p><p>在打开的终端中输入命令：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.\\adb connect </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:端口</span></span></code></pre></div><p>如替换为上面示例中的 <strong>62828</strong>:</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.\\adb connect </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">62028</span></span></code></pre></div><p>随后再执行：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.\\adb forward tcp:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tcp:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5800</span></span></code></pre></div><p>此时你已经成功开启端口了。</p><p><img src="'+A+'" alt="执行 adb 命令"></p><h3 id="连接海豹" tabindex="-1">连接海豹 <a class="header-anchor" href="#连接海豹" aria-label="Permalink to &quot;连接海豹&quot;">​</a></h3><p>在账号添加中，选择「QQ(onebot11正向WS)」，按照下面的格式进行填写：</p><img src="'+P+'" alt="连接 Shamrock" width="100%"><p>成功连接后即可使用。</p>',56),is={id:"shamrock-lspatch",tabindex:"-1"},ts=s("a",{class:"header-anchor",href:"#shamrock-lspatch","aria-label":'Permalink to "Shamrock LSPatch <Badge type="tip" text="v1.4.2" />"'},"​",-1),ns=n('<div class="warning custom-block"><p class="custom-block-title">注意：有难度的操作</p><p>此方式存在一定难度，你可能需要对使用命令行程序有所了解。</p></div><div class="warning custom-block"><p class="custom-block-title">注意：Andriod 版本要求</p><p>由于 LSPatch 要求安卓版本 9.0 以上，因此你的安卓手机版本必须超过安卓 9。</p></div><div class="info custom-block"><p class="custom-block-title">LSPatch</p><p>LSPatch 是在无 root 环境下使用 Shamrock 的一种途径，原理是利用 Shizuku 安装经 LSPatch 修补后的 QQ，再使用 Shamrock 劫持 QQ 并对外开放 API。</p></div><h3 id="安装-shizuku" tabindex="-1">安装 Shizuku <a class="header-anchor" href="#安装-shizuku" aria-label="Permalink to &quot;安装 Shizuku&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">Shizuku</p><p><a href="https://github.com/RikkaApps/Shizuku/releases" target="_blank" rel="noreferrer">Shizuku</a> 是一个帮助其他应用直接使用系统 API 的应用，而 Shizuku 本身则需要通过电脑使用 adb 工具赋予权限。</p><p>Adb 即 <a href="https://developer.android.com/studio/command-line/adb?hl=zh-cn" target="_blank" rel="noreferrer">Android 调试桥</a>，是安卓官方提供的帮助在电脑端调试 Android 设备的命令行工具。</p></div><p>首先需要在你的手机安装 Shizuku，安装后需要在电脑中使用 adb 命令为其赋予权限。</p>',6),es=s("p",null,[s("strong",null,"在 Windows 中使用 cmd 执行 adb 命令：")],-1),ls=s("ol",null,[s("li",null,[a("安装 adb，工具下载见 "),s("a",{href:"#开放模拟器端口供海豹对接"},"上文"),a("；")]),s("li",null,[a("打开 cmd 窗口； "),s("ul",null,[s("li",null,[a("如果你的电脑是 Window 11 操作系统，你可以直接右键 "),s("code",null,"platform-tools"),a(" 文件夹单击 "),s("strong",null,"在此处打开命令行"),a("；")]),s("li",null,"其它版本的打开方式请自行搜索。")])]),s("li",null,"你有多种方式使用 adb：")],-1),ps=s("ul",null,[s("li",null,[a("将 adb 添加至系统环境变量，在系统开始一栏中可以直接搜索到该功能，随后将 "),s("strong",null,"解压好的"),a(),s("code",null,"platform-tools"),a(" 路径填入至系统变量中的 "),s("code",null,"path"),a("，例如，adb 在 "),s("code",null,"E:/shamrock achieve/platform-tools"),a(" 文件夹中，那么你只需要将该路径填入 "),s("code",null,"path"),a(" 即可。 "),s("img",{src:w,alt:"adb path"}),s("ul",null,[s("li",null,[a("如果你是旧版本 Window（如 Win 7），系统未提供对应的 GUI，你需要使用 "),s("strong",null,[s("code",null,";")]),a(" 隔开不同的路径。")])])]),s("li",null,[a("也可以选择使用 "),s("code",null,"cd"),a(" 命令切换至 adb 目录，使用此方法请将 adb 放在 C 盘；（由于 Windows 权限问题，使用运行开启的 cmd 实例无法访问 C 盘之外的路径。） "),s("ul",null,[s("li",null,[s("code",null,"win + R"),a(" 键启动「运行」；")]),s("li",null,[a("在运行中输入 "),s("code",null,"cmd"),a(" 并回车；")]),s("li",null,[a("在打开的黑框框中输入命令 "),s("code",null,"cd <替换为对应路径>"),a("。 "),s("img",{src:T,alt:"切换到 adb 文件夹"})])])]),s("li",null,[a("还可以选择在 "),s("code",null,"platform-tools"),a(" 文件夹中新建"),s("code",null,".bat"),a(" 文件。")])],-1),os=n('<p>在手机中，你需要开启 <strong>USB 调试</strong> ，在手机设置中，选择「更多设置—关于手机」，多次点击软件版本号，即可进入开发者模式。</p><p>随后在「更多设置—开发者选项」中打开 <strong>USB 调试</strong>，使用数据线连接电脑和手机，随后在你的手机中出现指纹调试弹框，给予通过。</p><p>在电脑中使用命令：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">adb shell sh /storage/emulated/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Android/data/moe.shizuku.privileged.api/start.sh</span></span></code></pre></div><p><img src="'+D+'" alt="为 Shizuku 赋予 adb 权限"></p><h3 id="安装-lspatch" tabindex="-1">安装 LSPatch <a class="header-anchor" href="#安装-lspatch" aria-label="Permalink to &quot;安装 LSPatch&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">LSPatch</p><p><a href="https://github.com/LSPosed/LSPatch/releases" target="_blank" rel="noreferrer">LSPatch</a> 可以在无 root 环境使用 LSPosed 框架。</p><p>可以参看 <a href="https://duzhaokun123.github.io/2022/05/06/simple-lspatch-guide.html" target="_blank" rel="noreferrer">LSPatch 使用教程</a> 了解更多。</p></div><ol><li>你需要在 Shizuku 中启用 LSPatch，并重启 Shizuku。</li><li>在管理中，单击加号，选择已经下载的 QQ apk 文件，选择本地修补，等待一会，然后就可以安装了。</li></ol><h3 id="安装并激活-shamrock" tabindex="-1">安装并激活 Shamrock <a class="header-anchor" href="#安装并激活-shamrock" aria-label="Permalink to &quot;安装并激活 Shamrock&quot;">​</a></h3><p>安装方式 <a href="#安装-shamrock">上文</a> 有提及，此处不予重复。</p><p>在 LSPatch 中，长按修补后的 QQ 出现模块作用域，允许 Shamrock 然后重启 LSPatch。</p><p>激活 Shamrock 模块有三个前提，即 QQ 进程，Shamrock 进程和 LSPatch 进程存活，请自行配置保活策略，例如允许自启动，允许后台存活和关闭后台高耗电等。</p><h3 id="对接海豹" tabindex="-1">对接海豹 <a class="header-anchor" href="#对接海豹" aria-label="Permalink to &quot;对接海豹&quot;">​</a></h3><p>首先安装海豹安卓端。</p><div class="warning custom-block"><p class="custom-block-title">注意：确认海豹版本</p><p>请使用版本为 1.4.2 以上的安卓端海豹。</p></div><p>建议使用 <strong>反向 ws</strong> 设置。在海豹中，账号添加中选择「QQ(onebot11反向WS)」，填入骰子 QQ 号和要开放的 ws 端口（例如 <code>:6544</code>）。</p><p>随后在 Shamrock 中的被动 ws 连接地址中写 <code>ws://localhost:6544/ws</code>。</p>',17),hs={id:"chronocat",tabindex:"-1"},rs=s("a",{class:"header-anchor",href:"#chronocat","aria-label":'Permalink to "Chronocat <Badge type="tip" text="v1.4.2" />"'},"​",-1),ks={class:"warning custom-block"},cs=s("p",{class:"custom-block-title"},"注意：Chronocat 的新旧版本",-1),ds=s("p",null,[s("a",{href:"https://chronocat.vercel.app/",target:"_blank",rel:"noreferrer"},"Chronocat"),a(" 主要分为 0.0.x 的旧版本和 0.2.x 及以上的新版本。")],-1),gs=s("p",null,[a("在目前的新版本中，Chronocat 移除了 Red 协议，提供 Satori 协议的连接支持，使用该版本的见 "),s("a",{href:"#chronocat-satori-协议"},"Chronocat Satori 协议"),a("。")],-1),Es={id:"chronocat-satori-协议",tabindex:"-1"},us=s("a",{class:"header-anchor",href:"#chronocat-satori-协议","aria-label":'Permalink to "Chronocat Satori 协议 <Badge type="tip" text="v1.4.5" />"'},"​",-1),ms=s("p",null,"在账号添加中，选择「[WIP]Satori」，填写相应信息进行连接。",-1),qs={id:"官方机器人",tabindex:"-1"},ys=s("a",{class:"header-anchor",href:"#官方机器人","aria-label":'Permalink to "官方机器人 <Badge type="tip" text="v1.4.2" />"'},"​",-1),bs=n('<div class="tip custom-block"><p class="custom-block-title">提示：QQ 机器人</p><p>QQ 官方目前已开放了机器人功能，可进入 <a href="https://q.qq.com/#/" target="_blank" rel="noreferrer">QQ 开放平台</a> 进行申请。</p><p>但截止到目前，<strong>QQ 官方机器人的群聊权限并未对所有人开放</strong>。我们也希望在未来，每个人都能轻松地对接上官方提供的机器人服务。</p><p>同时，由于 QQ 官方对机器人能力的严格限制（包括获取 QQ 号、昵称，非 @ 时响应，私聊，群控等大量功能目前不支持），目前<strong>对接官方接口的骰子很多功能无法支持</strong>（如跑团 Log，暗骰，对抗等）。</p></div><h3 id="尝试一下" tabindex="-1">尝试一下 <a class="header-anchor" href="#尝试一下" aria-label="Permalink to &quot;尝试一下&quot;">​</a></h3><p>如果你想尝试一下这样的机器人，非常欢迎你使用海豹官方的骰子：</p><img src="'+N+'" alt="海豹机器人二维码" width="65%"><h3 id="获取连接所需信息" tabindex="-1">获取连接所需信息 <a class="header-anchor" href="#获取连接所需信息" aria-label="Permalink to &quot;获取连接所需信息&quot;">​</a></h3><p>要获取用于连接海豹的信息之前，你需要建立好一个 QQ 机器人应用。可前往 <a href="https://q.qq.com/#/" target="_blank" rel="noreferrer">QQ 开放平台</a> 进行申请，进行<strong>实名</strong>注册后，创建一个机器人应用。</p><p>创建完成后，进入机器人管理后台，切换到「开发设置」页面：</p><img src="'+W+'" alt="切换到开发设置" width="40%"><p>在页面中你可以看到这样的信息，其中「机器人 ID」「机器人令牌」「机器人密钥」这三项是海豹进行连接所需要的。</p><p><img src="'+I+'" alt="开发设置"></p><h3 id="连接海豹-1" tabindex="-1">连接海豹 <a class="header-anchor" href="#连接海豹-1" aria-label="Permalink to &quot;连接海豹&quot;">​</a></h3><p>登录海豹并添加账号，选择「QQ(官方机器人)」。填写对应的信息点击连接。你的海豹应该可以正常连接官方机器人运作了！</p><img src="'+R+'" alt="连接官方 Bot" width="100%"><h3 id="使用海豹" tabindex="-1">使用海豹 <a class="header-anchor" href="#使用海豹" aria-label="Permalink to &quot;使用海豹&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">注意</p><p>目前官方机器人只响应包含 <code>@</code> 的消息，操作时请注意。</p></div>',15);function Cs(_s,Fs,fs,Qs,Bs,Ss){const t=e("Badge"),p=e("PluginTabsTab"),o=e("PluginTabs");return k(),r("div",null,[O,s("p",null,[a("从 "),i(t,{type:"tip",text:"v1.4.5"}),a(" 开始，我们推荐使用 "),V,a(" 进行连接，这是面向一般用户提供的简单对接方式。")]),U,s("h2",M,[a("内置客户端 "),i(t,{type:"tip",text:"v1.4.5"}),a(),j]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.5"}),a(" 开始提供了内置客户端的连接方式。")]),G,s("h2",K,[a("Lagrange "),i(t,{type:"tip",text:"v1.4.2"}),a(),H]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.2"}),a(" 开始适配了 Lagrange（拉格兰）的连接。")]),J,s("h2",X,[a("LLOneBot "),i(t,{type:"tip",text:"v1.4.2"}),a(),Y]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.2"}),a(" 版本开始支持通过 OneBot 协议连接 LLOneBot。")]),Z,s("h2",$,[a("Shamrock "),i(t,{type:"tip",text:"v1.4.2"}),a(),ss]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.2"}),a(" 开始适配了 Shamrock 的连接。")]),as,s("h2",is,[a("Shamrock LSPatch "),i(t,{type:"tip",text:"v1.4.2"}),a(),ts]),ns,i(o,null,{default:l(()=>[i(p,{label:"Windows"},{default:l(()=>[es,ls,ps]),_:1})]),_:1}),os,s("h2",hs,[a("Chronocat "),i(t,{type:"tip",text:"v1.4.2"}),a(),rs]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.2"}),a(" 开始适配了 Chronocat（超时空猫猫）中 Red 协议的连接，从 "),i(t,{type:"tip",text:"v1.4.5"}),a(" 开始适配了与 Chronocat 的 Satori 协议连接。")]),s("div",ks,[cs,ds,s("p",null,[a("在 0.0.x 的旧版本中，海豹主要对接其 Red 协议，海豹从 "),i(t,{type:"tip",text:"v1.4.3"}),a(" 开始弃用此协议。")]),gs]),s("h3",Es,[a("Chronocat Satori 协议 "),i(t,{type:"tip",text:"v1.4.5"}),a(),us]),ms,s("h2",qs,[a("官方机器人 "),i(t,{type:"tip",text:"v1.4.2"}),a(),ys]),s("p",null,[a("海豹从 "),i(t,{type:"tip",text:"v1.4.2"}),a(" 开始支持对接 QQ 官方的机器人服务。")]),bs])}const xs=h(z,[["render",Cs]]);export{Ls as __pageData,xs as default};
